import { writeFileSync } from 'node:fs';
import { spawnSync } from 'node:child_process';

import { parseFetchurl } from './lib';
import { styleText } from 'node:util';


/* Constants */
const FLAKE = process.env.FLAKE;

const genVueText = (
    version: string,
    hash: string,
    url: string,
) => `# This file was autogenerated. DO NOT EDIT!
{
  version = "${version}";
  url = "${url}";
  hash = "${hash}";
}
`;

export const updateVuetorrent = () => {
    console.log(styleText(['magenta'], '\nUpdating Vuetorrent:\n'));

    const FILE = `${FLAKE}/configurations/nos/modules/qbittorrent/vuetorrent.nix`;

    const OLD_VERSION = JSON.parse(spawnSync('nix',
        ['eval', '-f', FILE, '--json'],
        { shell: true }).stdout.toString()).version;

    const VERSION = JSON.parse(spawnSync('curl',
        ['-s', 'https://api.github.com/repos/VueTorrent/VueTorrent/releases/latest'],
        { shell: true }).stdout.toString()).tag_name.replace('v', '');

    const URL = `https://github.com/VueTorrent/VueTorrent/releases/download/v${VERSION}/vuetorrent.zip`;
    const HASH = parseFetchurl(URL);

    const fileText = genVueText(VERSION, HASH, URL);

    writeFileSync(FILE, fileText);

    return OLD_VERSION !== VERSION ? `Vuetorrent: ${OLD_VERSION} -> ${VERSION}` : '';
};


const getAttrVersion = (attr: string): string => spawnSync('nix',
    ['eval', '--raw', `${FLAKE}#${attr}.version`],
    { shell: true }).stdout.toString();

export const runNixUpdate = (
    attr: string,
    scope?: string,
    scopeAttr?: string,
): {
    changelog: string | null
    stdout: string
    stderr: string
} => {
    const realAttr = scope ? `${attr}.x86_64-linux.${scope}.${scopeAttr}` : attr;
    const cleanAttr = scope ? `${attr}.${scope}.${scopeAttr}` : attr;

    console.log(styleText(['magenta'], `\nUpdating ${realAttr}:\n`));

    const OLD_VERSION = getAttrVersion(realAttr);

    const execution = spawnSync('nix-update', ['--flake', realAttr, '-u'], { cwd: FLAKE });

    const NEW_VERSION = getAttrVersion(realAttr);

    return {
        changelog: OLD_VERSION !== NEW_VERSION ?
            `${cleanAttr}: ${OLD_VERSION} -> ${NEW_VERSION}\n` :
            null,
        stdout: execution.stdout.toString(),
        stderr: execution.stderr.toString(),
    };
};
